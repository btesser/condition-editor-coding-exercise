{"name":"Condition Editor UI","tagline":"A Coding Exercise for UI Developers","body":"# Product Filtering Condition Editor UI\r\nA Coding Exercise for UI Developers\r\n\r\n# Introduction\r\n\r\nMany capabilites of Salsify are built around filtered sets of products. Products at Salsify consist of properties and their values. Properties have a datatype.\r\n\r\nIn order to create filtered sets of products in Salsify we created a condition editor. This editor is used to build a filter that Salsify applies to the full set of products. The resulting set of products, presented in a product index view, is updated as filters are added or changed.\r\n\r\nIn order to create a filter condition a user must choose a property, an operation, and one or more values. Due to the differences in property datatypes, not all operations apply to all properties.\r\n\r\nTo complete this exercise please build a user interface to create a filter and update a list of products to reflect the results. Use the exercise to demonstrate not only a solution to the problem but your approach to software design and testing.\r\n\r\nProvide us with an archive containing the results of your work and a README file with a guided tour of your work, notes on your development process, how long you spent on the exercise, what assumptions you made, etc.  If you wish, this may also be presented as a live site.  In that case simply provide a link to the site and the README file mentioned above.\r\n\r\n# Specification\r\n\r\nThis repository contains a mock `datastore` which includes sample products, propderty definitions including data types, and the complete set of filter operations. Using this datastore please create a web user inteface with the following behavior:\r\n\r\n* A user can create a single filter\r\n* Filters have the form `[property name] [operator] [property value]`\r\n* Creating or updating a filter causes the the view of products to update\r\n\r\n# Recommendations / Non-requirements\r\nWe recommend splitting the UI for this project into 2 views; one for the condition editor and one for the products list. The products list view in Salsify is reused in many places throughout the application both with and without the condition editor. For the purpose of this exercise **it is not necessary to properly filter the products**. Simply demonstrating that the product list changes and that it has knowledge of the current filter is sufficient. We are mainly interested in seeing how you design the condition editor and the interface between the views.\r\n\r\n## Properties Types/Operators\r\n\r\nOperators define the relationship between properties and property values. Certain operators are only valid for certain property types, valid operators for each property type are defined as follows:\r\n\r\n| Property Type | Valid Operators |\r\n---------------- | ----------------\r\n| string | equals (value exactly matches) |\r\n| | any (value is present) |\r\n| | none (value is absent) |\r\n| | in (value exactly matches one of several values)|\r\n| number | equals |\r\n| | greater_than |\r\n| | less_than |\r\n| | any |\r\n| | none |\r\n| | in |\r\n| enumerated | equals |\r\n| | any |\r\n| | none |\r\n| | in |","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}